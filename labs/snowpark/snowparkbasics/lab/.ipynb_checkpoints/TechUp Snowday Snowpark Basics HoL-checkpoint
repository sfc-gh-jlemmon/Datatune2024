{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "3b648ee8",
   "metadata": {},
   "source": [
    "# Snowpark Basics HoL"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ed15903",
   "metadata": {},
   "source": [
    "## Setup"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ae2e8402-54a4-47da-a6b2-da3d063f934a",
   "metadata": {},
   "source": [
    "### Imports"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7410ce0d",
   "metadata": {},
   "outputs": [],
   "source": [
    "from snowflake.snowpark.session import Session\n",
    "import snowflake.snowpark.functions as F\n",
    "import snowflake.snowpark.types as T\n",
    "from snowflake.snowpark.window import Window\n",
    "from snowflake.ml.modeling.preprocessing import *\n",
    "from snowflake.ml.modeling.impute import *\n",
    "\n",
    "import sys\n",
    "import json\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a1f95920",
   "metadata": {},
   "source": [
    "### Create Snowpark Session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9a7da15f",
   "metadata": {},
   "outputs": [],
   "source": [
    "with open('creds.json') as f:\n",
    "    connection_parameters = json.load(f)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "49090e02",
   "metadata": {},
   "outputs": [],
   "source": [
    "session = Session.builder.configs(connection_parameters).create()\n",
    "print(f\"Current Database and schema: {session.get_fully_qualified_current_schema()}\")\n",
    "print(f\"Current Warehouse: {session.get_current_warehouse()}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ba1c0c26",
   "metadata": {},
   "source": [
    "## Loading our DataFrame"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4de7c8c2-5fc7-4ee7-9f55-6468179d7fee",
   "metadata": {},
   "source": [
    "### Pandas DataFrames from CSV"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 173,
   "id": "8e6d1164",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n"
     ]
    }
   ],
   "source": [
    "# Creating a Pandas DataFrame - the order header csv is in fact the data from only one truck!!\n",
    "pandas_truck_df = pd.read_csv('data/truck.csv')\n",
    "pandas_header_df = pd.read_csv('data/header.csv')\n",
    "print(type(pandas_truck_df))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "27e9da18-f43d-487f-b041-d5223b99395c",
   "metadata": {},
   "source": [
    "### Snowpark DataFrames from Tables"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a3d391b0-58e0-4b39-90bb-27bb4ce78a22",
   "metadata": {},
   "source": [
    "The Snowpark **Table** class is a child of the **DataFrame** class. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 185,
   "id": "623695f6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'snowflake.snowpark.table.Table'>\n"
     ]
    }
   ],
   "source": [
    "# Creating a Snowpark DataFrame\n",
    "snowpark_truck_df = session.table('TRUCK')\n",
    "snowpark_header_df = session.table('ORDER_HEADER')\n",
    "print(type(snowpark_truck_df))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e01a48f9-ed44-4974-9493-137c303d328c",
   "metadata": {},
   "source": [
    "### Comparing DataFrames"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 186,
   "id": "b2d4f6b3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Size in MB of Pandas Truck DataFrame in Memory:  0.25\n",
      "Size in MB of Snowpark Truck DataFrame in Memory:  0.0\n",
      "Size in MB of Pandas Header DataFrame in Memory:  245.22\n",
      "Size in MB of Snowpark Header DataFrame in Memory:  0.0\n"
     ]
    }
   ],
   "source": [
    "# Compare sizes \n",
    "print('Size in MB of Pandas Truck DataFrame in Memory: ', np.round(sys.getsizeof(pandas_truck_df) / (1024.0**2), 2))\n",
    "print('Size in MB of Snowpark Truck DataFrame in Memory: ', np.round(sys.getsizeof(snowpark_truck_df) / (1024.0**2), 2))\n",
    "print('Size in MB of Pandas Header DataFrame in Memory: ', np.round(sys.getsizeof(pandas_header_df) / (1024.0**2), 2))\n",
    "print('Size in MB of Snowpark Header DataFrame in Memory: ', np.round(sys.getsizeof(snowpark_header_df) / (1024.0**2), 2))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "03ea0fc5",
   "metadata": {},
   "source": [
    "The only thing stored in a Snowpark DataFrame is the SQL needed to return data.\n",
    "<br>Trying to manipulate even one truck's worth of order headers in Pandas starts to get interesting."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "30ac7d60-30d6-412b-baf8-b6010597e90c",
   "metadata": {},
   "source": [
    "Now, what is going on under the covers? You might want to log into your Snowflake account as the same user and review Snowsight Query History. But you can also use this DataFrame attribute from Snowpark..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 187,
   "id": "43db7633",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'queries': ['SELECT  *  FROM (ORDER_HEADER)'], 'post_actions': []}"
      ]
     },
     "execution_count": 187,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "snowpark_header_df.queries"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d3cf44c3",
   "metadata": {},
   "source": [
    "A Snowpark DataFrame can be converted to a Pandas DataFrame. This will pull the data from Snowflake into the Python enviroment memory."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 188,
   "id": "e1ec1ddc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>TRUCK_ID</th>\n",
       "      <th>MENU_TYPE_ID</th>\n",
       "      <th>PRIMARY_CITY</th>\n",
       "      <th>REGION</th>\n",
       "      <th>ISO_REGION</th>\n",
       "      <th>COUNTRY</th>\n",
       "      <th>ISO_COUNTRY_CODE</th>\n",
       "      <th>FRANCHISE_FLAG</th>\n",
       "      <th>YEAR</th>\n",
       "      <th>MAKE</th>\n",
       "      <th>MODEL</th>\n",
       "      <th>EV_FLAG</th>\n",
       "      <th>FRANCHISE_ID</th>\n",
       "      <th>TRUCK_OPENING_DATE</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>San Mateo</td>\n",
       "      <td>California</td>\n",
       "      <td>CA</td>\n",
       "      <td>United States</td>\n",
       "      <td>US</td>\n",
       "      <td>0</td>\n",
       "      <td>2015</td>\n",
       "      <td>Ford_</td>\n",
       "      <td>Step Van</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2015-07-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>San Mateo</td>\n",
       "      <td>California</td>\n",
       "      <td>CA</td>\n",
       "      <td>United States</td>\n",
       "      <td>US</td>\n",
       "      <td>1</td>\n",
       "      <td>2004</td>\n",
       "      <td>Freightliner</td>\n",
       "      <td>MT45 Utilimaster</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2015-11-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>San Mateo</td>\n",
       "      <td>California</td>\n",
       "      <td>CA</td>\n",
       "      <td>United States</td>\n",
       "      <td>US</td>\n",
       "      <td>1</td>\n",
       "      <td>1997</td>\n",
       "      <td>Chevrolet</td>\n",
       "      <td>P30</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>2019-02-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>San Mateo</td>\n",
       "      <td>California</td>\n",
       "      <td>CA</td>\n",
       "      <td>United States</td>\n",
       "      <td>US</td>\n",
       "      <td>1</td>\n",
       "      <td>2010</td>\n",
       "      <td>Custom</td>\n",
       "      <td>Van</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>2020-04-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>San Mateo</td>\n",
       "      <td>California</td>\n",
       "      <td>CA</td>\n",
       "      <td>United States</td>\n",
       "      <td>US</td>\n",
       "      <td>1</td>\n",
       "      <td>2010</td>\n",
       "      <td>Airstream</td>\n",
       "      <td>Trailer</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>2015-07-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>445</th>\n",
       "      <td>392</td>\n",
       "      <td>2</td>\n",
       "      <td>Madrid</td>\n",
       "      <td>Madrid provincia</td>\n",
       "      <td>Madrid</td>\n",
       "      <td>Spain</td>\n",
       "      <td>ES</td>\n",
       "      <td>0</td>\n",
       "      <td>2010</td>\n",
       "      <td>Ford_</td>\n",
       "      <td>Step Van</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2014-12-29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>446</th>\n",
       "      <td>396</td>\n",
       "      <td>6</td>\n",
       "      <td>Madrid</td>\n",
       "      <td>Madrid provincia</td>\n",
       "      <td>Madrid</td>\n",
       "      <td>Spain</td>\n",
       "      <td>ES</td>\n",
       "      <td>1</td>\n",
       "      <td>2005</td>\n",
       "      <td>Freightliner</td>\n",
       "      <td>MT45 Utilimaster</td>\n",
       "      <td>1</td>\n",
       "      <td>298</td>\n",
       "      <td>2014-12-29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>447</th>\n",
       "      <td>419</td>\n",
       "      <td>14</td>\n",
       "      <td>Barcelona</td>\n",
       "      <td>Barcelona provincia</td>\n",
       "      <td>Barcelona</td>\n",
       "      <td>Spain</td>\n",
       "      <td>ES</td>\n",
       "      <td>1</td>\n",
       "      <td>2015</td>\n",
       "      <td>Airstream</td>\n",
       "      <td>Trailer</td>\n",
       "      <td>0</td>\n",
       "      <td>312</td>\n",
       "      <td>2014-12-29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>448</th>\n",
       "      <td>427</td>\n",
       "      <td>7</td>\n",
       "      <td>Cairo</td>\n",
       "      <td>Cairo Governorate</td>\n",
       "      <td>Al Qahirah</td>\n",
       "      <td>Egypt</td>\n",
       "      <td>EG</td>\n",
       "      <td>1</td>\n",
       "      <td>2005</td>\n",
       "      <td>Ford_</td>\n",
       "      <td>Step Van</td>\n",
       "      <td>0</td>\n",
       "      <td>319</td>\n",
       "      <td>2014-12-29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>449</th>\n",
       "      <td>450</td>\n",
       "      <td>15</td>\n",
       "      <td>Cape Town</td>\n",
       "      <td>Western Cape</td>\n",
       "      <td>Western Cape</td>\n",
       "      <td>South Africa</td>\n",
       "      <td>ZA</td>\n",
       "      <td>1</td>\n",
       "      <td>2009</td>\n",
       "      <td>Ford_</td>\n",
       "      <td>Step Van</td>\n",
       "      <td>0</td>\n",
       "      <td>336</td>\n",
       "      <td>2014-12-29</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>450 rows × 14 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     TRUCK_ID  MENU_TYPE_ID PRIMARY_CITY               REGION    ISO_REGION  \\\n",
       "0           2             2    San Mateo           California            CA   \n",
       "1           3             3    San Mateo           California            CA   \n",
       "2           4             4    San Mateo           California            CA   \n",
       "3           5             5    San Mateo           California            CA   \n",
       "4           6             6    San Mateo           California            CA   \n",
       "..        ...           ...          ...                  ...           ...   \n",
       "445       392             2       Madrid     Madrid provincia        Madrid   \n",
       "446       396             6       Madrid     Madrid provincia        Madrid   \n",
       "447       419            14    Barcelona  Barcelona provincia     Barcelona   \n",
       "448       427             7        Cairo    Cairo Governorate    Al Qahirah   \n",
       "449       450            15    Cape Town         Western Cape  Western Cape   \n",
       "\n",
       "           COUNTRY ISO_COUNTRY_CODE  FRANCHISE_FLAG  YEAR          MAKE  \\\n",
       "0    United States               US               0  2015         Ford_   \n",
       "1    United States               US               1  2004  Freightliner   \n",
       "2    United States               US               1  1997     Chevrolet   \n",
       "3    United States               US               1  2010        Custom   \n",
       "4    United States               US               1  2010     Airstream   \n",
       "..             ...              ...             ...   ...           ...   \n",
       "445          Spain               ES               0  2010         Ford_   \n",
       "446          Spain               ES               1  2005  Freightliner   \n",
       "447          Spain               ES               1  2015     Airstream   \n",
       "448          Egypt               EG               1  2005         Ford_   \n",
       "449   South Africa               ZA               1  2009         Ford_   \n",
       "\n",
       "                MODEL  EV_FLAG  FRANCHISE_ID TRUCK_OPENING_DATE  \n",
       "0            Step Van        0             1         2015-07-01  \n",
       "1    MT45 Utilimaster        0             2         2015-11-01  \n",
       "2                 P30        1             3         2019-02-01  \n",
       "3                 Van        1             4         2020-04-01  \n",
       "4             Trailer        0             5         2015-07-01  \n",
       "..                ...      ...           ...                ...  \n",
       "445          Step Van        0             1         2014-12-29  \n",
       "446  MT45 Utilimaster        1           298         2014-12-29  \n",
       "447           Trailer        0           312         2014-12-29  \n",
       "448          Step Van        0           319         2014-12-29  \n",
       "449          Step Van        0           336         2014-12-29  \n",
       "\n",
       "[450 rows x 14 columns]"
      ]
     },
     "execution_count": 188,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pandas_truck_df2 = snowpark_truck_df.to_pandas()\n",
    "pandas_truck_df2"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a7e707de",
   "metadata": {},
   "source": [
    "Both our Pandas DataFrames havethe same shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 189,
   "id": "db95baaf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((450, 14), (450, 14))"
      ]
     },
     "execution_count": 189,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pandas_truck_df.shape, pandas_truck_df2.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "327f42bc",
   "metadata": {},
   "source": [
    "Showing a Snowpark DataFrame"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 190,
   "id": "aa02b8e8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "|\"ORDER_ID\"  |\"TRUCK_ID\"  |\"LOCATION_ID\"  |\"CUSTOMER_ID\"  |\"DISCOUNT_ID\"  |\"SHIFT_ID\"  |\"SHIFT_START_TIME\"  |\"SHIFT_END_TIME\"  |\"ORDER_CHANNEL\"  |\"ORDER_TS\"                  |\"SERVED_TS\"  |\"ORDER_CURRENCY\"  |\"ORDER_AMOUNT\"  |\"ORDER_TAX_AMOUNT\"  |\"ORDER_DISCOUNT_AMOUNT\"  |\"ORDER_TOTAL\"  |\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "|142337652   |345         |4983.0         |NULL           |NULL           |0           |17:00:00            |23:59:59          |NULL             |2021-12-28 22:27:25.903000  |NULL         |USD               |11.5300         |NULL                |NULL                     |11.5300        |\n",
      "|142337653   |202         |4441.0         |NULL           |NULL           |0           |17:00:00            |23:59:59          |NULL             |2021-12-28 21:30:02.031000  |NULL         |USD               |22.0600         |NULL                |NULL                     |22.0600        |\n",
      "|142337654   |316         |9147.0         |NULL           |NULL           |0           |17:00:00            |23:59:59          |NULL             |2021-12-28 22:59:52.680000  |NULL         |USD               |3.0000          |NULL                |NULL                     |3.0000         |\n",
      "|142337655   |443         |7494.0         |NULL           |NULL           |0           |17:00:00            |23:59:59          |NULL             |2021-12-28 18:00:08.966000  |NULL         |USD               |41.3500         |NULL                |NULL                     |41.3500        |\n",
      "|142337656   |90          |2035.0         |NULL           |NULL           |0           |17:00:00            |23:59:59          |NULL             |2021-12-28 17:56:42.173000  |NULL         |USD               |12.4800         |NULL                |NULL                     |12.4800        |\n",
      "|142337657   |397         |14351.0        |NULL           |NULL           |0           |17:00:00            |23:59:59          |NULL             |2021-12-28 17:18:50.179000  |NULL         |USD               |10.7900         |NULL                |NULL                     |10.7900        |\n",
      "|142337658   |321         |7174.0         |NULL           |NULL           |0           |17:00:00            |23:59:59          |NULL             |2021-12-28 20:36:01.363000  |NULL         |USD               |11.4100         |NULL                |NULL                     |11.4100        |\n",
      "|142337659   |406         |13515.0        |NULL           |NULL           |0           |17:00:00            |23:59:59          |NULL             |2021-12-28 18:11:53.327000  |NULL         |USD               |7.0700          |NULL                |NULL                     |7.0700         |\n",
      "|142337660   |64          |3329.0         |NULL           |NULL           |0           |17:00:00            |23:59:59          |NULL             |2021-12-28 21:50:50.160000  |NULL         |USD               |11.9800         |NULL                |NULL                     |11.9800        |\n",
      "|142337661   |270         |9742.0         |NULL           |NULL           |0           |17:00:00            |23:59:59          |NULL             |2021-12-28 19:59:57.091000  |NULL         |USD               |7.5700          |NULL                |NULL                     |7.5700         |\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ORDER_ID</th>\n",
       "      <th>TRUCK_ID</th>\n",
       "      <th>LOCATION_ID</th>\n",
       "      <th>CUSTOMER_ID</th>\n",
       "      <th>DISCOUNT_ID</th>\n",
       "      <th>SHIFT_ID</th>\n",
       "      <th>SHIFT_START_TIME</th>\n",
       "      <th>SHIFT_END_TIME</th>\n",
       "      <th>ORDER_CHANNEL</th>\n",
       "      <th>ORDER_TS</th>\n",
       "      <th>SERVED_TS</th>\n",
       "      <th>ORDER_CURRENCY</th>\n",
       "      <th>ORDER_AMOUNT</th>\n",
       "      <th>ORDER_TAX_AMOUNT</th>\n",
       "      <th>ORDER_DISCOUNT_AMOUNT</th>\n",
       "      <th>ORDER_TOTAL</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>142337652</td>\n",
       "      <td>345</td>\n",
       "      <td>4983.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>None</td>\n",
       "      <td>0</td>\n",
       "      <td>17:00:00</td>\n",
       "      <td>23:59:59</td>\n",
       "      <td>None</td>\n",
       "      <td>2021-12-28 22:27:25.903</td>\n",
       "      <td>None</td>\n",
       "      <td>USD</td>\n",
       "      <td>11.53</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>11.53</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>142337653</td>\n",
       "      <td>202</td>\n",
       "      <td>4441.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>None</td>\n",
       "      <td>0</td>\n",
       "      <td>17:00:00</td>\n",
       "      <td>23:59:59</td>\n",
       "      <td>None</td>\n",
       "      <td>2021-12-28 21:30:02.031</td>\n",
       "      <td>None</td>\n",
       "      <td>USD</td>\n",
       "      <td>22.06</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>22.06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>142337654</td>\n",
       "      <td>316</td>\n",
       "      <td>9147.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>None</td>\n",
       "      <td>0</td>\n",
       "      <td>17:00:00</td>\n",
       "      <td>23:59:59</td>\n",
       "      <td>None</td>\n",
       "      <td>2021-12-28 22:59:52.680</td>\n",
       "      <td>None</td>\n",
       "      <td>USD</td>\n",
       "      <td>3.00</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>3.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>142337655</td>\n",
       "      <td>443</td>\n",
       "      <td>7494.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>None</td>\n",
       "      <td>0</td>\n",
       "      <td>17:00:00</td>\n",
       "      <td>23:59:59</td>\n",
       "      <td>None</td>\n",
       "      <td>2021-12-28 18:00:08.966</td>\n",
       "      <td>None</td>\n",
       "      <td>USD</td>\n",
       "      <td>41.35</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>41.35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>142337656</td>\n",
       "      <td>90</td>\n",
       "      <td>2035.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>None</td>\n",
       "      <td>0</td>\n",
       "      <td>17:00:00</td>\n",
       "      <td>23:59:59</td>\n",
       "      <td>None</td>\n",
       "      <td>2021-12-28 17:56:42.173</td>\n",
       "      <td>None</td>\n",
       "      <td>USD</td>\n",
       "      <td>12.48</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>12.48</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    ORDER_ID  TRUCK_ID  LOCATION_ID  CUSTOMER_ID DISCOUNT_ID  SHIFT_ID  \\\n",
       "0  142337652       345       4983.0          NaN        None         0   \n",
       "1  142337653       202       4441.0          NaN        None         0   \n",
       "2  142337654       316       9147.0          NaN        None         0   \n",
       "3  142337655       443       7494.0          NaN        None         0   \n",
       "4  142337656        90       2035.0          NaN        None         0   \n",
       "\n",
       "  SHIFT_START_TIME SHIFT_END_TIME ORDER_CHANNEL                ORDER_TS  \\\n",
       "0         17:00:00       23:59:59          None 2021-12-28 22:27:25.903   \n",
       "1         17:00:00       23:59:59          None 2021-12-28 21:30:02.031   \n",
       "2         17:00:00       23:59:59          None 2021-12-28 22:59:52.680   \n",
       "3         17:00:00       23:59:59          None 2021-12-28 18:00:08.966   \n",
       "4         17:00:00       23:59:59          None 2021-12-28 17:56:42.173   \n",
       "\n",
       "  SERVED_TS ORDER_CURRENCY  ORDER_AMOUNT ORDER_TAX_AMOUNT  \\\n",
       "0      None            USD         11.53             None   \n",
       "1      None            USD         22.06             None   \n",
       "2      None            USD          3.00             None   \n",
       "3      None            USD         41.35             None   \n",
       "4      None            USD         12.48             None   \n",
       "\n",
       "  ORDER_DISCOUNT_AMOUNT  ORDER_TOTAL  \n",
       "0                  None        11.53  \n",
       "1                  None        22.06  \n",
       "2                  None         3.00  \n",
       "3                  None        41.35  \n",
       "4                  None        12.48  "
      ]
     },
     "execution_count": 190,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "snowpark_header_df.show() # <- has a default limit of 10\n",
    "snowpark_header_df.limit(5).to_pandas() # <- collects first 5 rows and displays as pandas-dataframe"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "de7848e9",
   "metadata": {},
   "source": [
    "## Managing Columns"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "81f43c9f-fc7f-46fe-b90a-ebac3a98d497",
   "metadata": {},
   "source": [
    "### Selecting Columns\n",
    "There are several ways to do **select specific columns**, including functions.col and Dataframe.col. The latter two are sometimes needed in specific stuations to avoid ambiguities. More below...  See snowflake.snowpark.Column "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "79a577f5",
   "metadata": {},
   "outputs": [],
   "source": [
    "snowpark_df1 = snowpark_header_df.select('ORDER_ID','TRUCK_ID','LOCATION_ID','ORDER_AMOUNT')\n",
    "snowpark_df2 = snowpark_header_df[['ORDER_ID','TRUCK_ID','LOCATION_ID','ORDER_AMOUNT']] # -> pandas-like selection\n",
    "snowpark_df3 = snowpark_header_df.select(F.col(\"ORDER_ID\"),F.col(\"TRUCK_ID\"),F.col('LOCATION_ID'),F.col('ORDER_AMOUNT'))\n",
    "snowpark_df1.show()\n",
    "snowpark_df2.show()\n",
    "snowpark_df3.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9f8f387a-9910-4f5d-9589-7be383c3524d",
   "metadata": {},
   "source": [
    "We can **cast the column datatypes**. For example ORDER_AMOUNT could be cast to NUMBER(36,2):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1580443c-7d5a-4ac4-9d57-821036f61f12",
   "metadata": {},
   "outputs": [],
   "source": [
    "from snowflake.snowpark.types import DecimalType\n",
    "\n",
    "snowpark_df1 = snowpark_header_df.select(F.col(\"ORDER_ID\"),F.col('ORDER_AMOUNT').cast(DecimalType(36,2)))\n",
    "snowpark_df1.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d3df34c7-8ad1-4aeb-8bd1-2a75e6bac40d",
   "metadata": {},
   "source": [
    "That's a bit ugly. Let's alias that column...  **alias**, **name** and **as_** all achieve the same effect"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a271172b-e139-461e-854a-0f92cefc7c64",
   "metadata": {},
   "outputs": [],
   "source": [
    "from snowflake.snowpark.types import DecimalType\n",
    "\n",
    "snowpark_df1 = snowpark_header_df.select(F.col(\"ORDER_ID\"),F.col('ORDER_AMOUNT').cast(DecimalType(36,2)).alias(\"ORDER_AMOUNT_USD\"))\n",
    "snowpark_df1.show()\n",
    "snowpark_df1.queries"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "decf11ed-7630-4f18-a9df-e455cb92e125",
   "metadata": {},
   "source": [
    "### Adding and Removing Columns\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "16c88906",
   "metadata": {},
   "source": [
    "To add a new calculated column to a Snowpark DataFrame the **with_column** method can be used.  \n",
    "In this example we are adding a new TRUCK column, AGE, that calculates the number of years since the YEAR - for now avoiding Python date processing detail.  \n",
    "Note the use of F.col here - otherwise 'YEAR' could be seen as a value."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e207ac8f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create a new column for truck age - at this point hard-coded\n",
    "# Formula: 2023 - YEAR\n",
    "\n",
    "snowpark_df1 = snowpark_truck_df.with_column('AGE', 2023 - F.col('YEAR'))\n",
    "snowpark_df1.to_pandas()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ed4eabd5",
   "metadata": {},
   "source": [
    "If we do not want to use specific columns we can use **drop** to remove those from a Snowpark DataFrame.  \n",
    "**Note:** This is not removing them from the underlying table."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8b6057de",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Drop a column\n",
    "snowpark_df1 = snowpark_df1.drop('MAKE','MODEL','YEAR')\n",
    "snowpark_df1.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ea617ddf",
   "metadata": {},
   "source": [
    "To filter/select specific rows we use **filter**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7abe304d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Filter data\n",
    "snowpark_df2 = snowpark_df1.filter(F.col('ISO_COUNTRY_CODE').in_('ES','UK'))\n",
    "snowpark_df2.show()\n",
    "snowpark_df3 = snowpark_df1.filter(F.col('ISO_COUNTRY_CODE') == 'GB')\n",
    "snowpark_df3.show()\n",
    "snowpark_df3.queries"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cbc21227",
   "metadata": {},
   "source": [
    "To aggregate data the **group_by** method are used in combination with the **agg** method."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1a56c822",
   "metadata": {},
   "outputs": [],
   "source": [
    "snowpark_df = snowpark_df.group_by(['CODE_GENDER','NAME_INCOME_TYPE']).agg([F.avg('AGE').as_('AVG_AGE')])\n",
    "snowpark_df.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "11a1235e",
   "metadata": {},
   "source": [
    "To sort the data in the dataframe **sort** is used."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2196027d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Sort data\n",
    "snowpark_df = snowpark_df.sort(F.col('AVG_AGE').desc())\n",
    "snowpark_df.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8c5f63dc",
   "metadata": {},
   "source": [
    "## Simple Data Analysis\n",
    "In this section we will use API Snowpark to do some basic analysis of our data.  \n",
    "Start by creating a new Snowpark DataFrame"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9f2173fb",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Creating a Snowpark DataFrame\n",
    "snowpark_df = session.table('APPLICATION_RECORD')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b7e32fd8",
   "metadata": {},
   "source": [
    "The **count** method on a DataFrame will return the number of rows"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4d4433a5",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Number of rows in dataset\n",
    "snowpark_df.count()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5150f9f8",
   "metadata": {},
   "source": [
    "If we want to filter out duplicated rows, keeping only one, we can use the **drop_duplicates** method."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bba56dd6",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Lets drop duplicates based on ID\n",
    "snowpark_df = snowpark_df.drop_duplicates('ID')\n",
    "snowpark_df.count()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ae98139b",
   "metadata": {},
   "source": [
    "Duplicated rows are only filtered and we can see the logic for it by examining the SQL for the DataFrame, using ['queries'][0] will return the first SQL statement for the DataFrame"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2f3846b7",
   "metadata": {},
   "outputs": [],
   "source": [
    "print(snowpark_df.queries['queries'][0])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "00849069",
   "metadata": {},
   "source": [
    "Using the **describe** method will return some basic statistics for all numeric and string columns."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3ff508f7",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Calculating various statistics per column\n",
    "snowpark_df.describe().to_pandas()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d8b0fef7",
   "metadata": {},
   "source": [
    "Using **group_by** and **agg** alows us to calculate the mean value of AMT_INCOME_TOTAL by NAME_INCOME_TYPE and CODE_GENDER. Using **sort** to return the data ordered by NAME_INCOME_TYPE in ascending order and AVG_INCOME by descending order."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9fefe311",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Average Income per Income Type and Gender\n",
    "analysis_df = snowpark_df.group_by(['NAME_INCOME_TYPE','CODE_GENDER']).agg([F.mean('AMT_INCOME_TOTAL').as_('AVG_INCOME')])\n",
    "analysis_df = analysis_df.sort('NAME_INCOME_TYPE', F.col('AVG_INCOME').desc())\n",
    "analysis_df.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "32f3d751",
   "metadata": {},
   "source": [
    "We can use the SimpleImputer in snowflake.ml.preprocessing to replace missing values with the most frequent."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "61273d48",
   "metadata": {},
   "outputs": [],
   "source": [
    "my_imputer = SimpleImputer(input_cols=['OCCUPATION_TYPE'], output_cols=['OCCUPATION_TYPE'] ,strategy='most_frequent')\n",
    "my_imputer.fit(snowpark_df)\n",
    "snowpark_df = my_imputer.transform(snowpark_df)\n",
    "snowpark_df.describe().show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "991beaa4",
   "metadata": {},
   "source": [
    "The missing value handling logic is converted in SQL to *iff(\"OCCUPATION_TYPE\" IS NULL, 'Laborers', \"OCCUPATION_TYPE\") AS \"OCCUPATION_TYPE\"*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bac12f72",
   "metadata": {},
   "outputs": [],
   "source": [
    "print(snowpark_df.queries['queries'][0])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5b8d26f8",
   "metadata": {},
   "source": [
    "A DataFrame always has a schema with all columns and the data types for them"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "13cca9d1",
   "metadata": {},
   "outputs": [],
   "source": [
    "snowpark_df.schema"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5b2ae444",
   "metadata": {},
   "source": [
    "We can itirate through the schema to get the columns of specific data types"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "17735cdb",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Get all categorical columns\n",
    "categorical_types = [T.StringType]\n",
    "categorical_columns = [c.name for c in snowpark_df.schema.fields if type(c.datatype) in categorical_types]\n",
    "categorical_columns"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e1c1ba4c",
   "metadata": {},
   "source": [
    "We can then use those to loop through and get the number of unique values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "682ae682",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Number of unique values per categorical column\n",
    "unique_values = []\n",
    "for column in categorical_columns:\n",
    "    unique_values.append([column, snowpark_df.select(column).distinct().count()])\n",
    "pd.DataFrame(unique_values, columns=['COLUMN_NAME','NUM_UNIQUE_VALUES'])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bc3c3a6a",
   "metadata": {},
   "source": [
    "## Persist Transformations\n",
    "\n",
    "If we want to save the changes we can either save it as a table, meaning the SQL generated by the DataFrame is executed and the result is stored in a table or as a view where the DataFrame SQL will be the definition of the view.  \n",
    "**save_as_table** saves the result in a table, if **mode='overwrite'** then it will also replace the data that is in it."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "995c4a8d",
   "metadata": {},
   "outputs": [],
   "source": [
    "snowpark_df.write.save_as_table(table_name='MY_FIRST_ANALYSIS', mode='overwrite')\n",
    "session.table('MY_FIRST_ANALYSIS').show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a4dc8b69",
   "metadata": {},
   "outputs": [],
   "source": [
    "session.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "22dd7e50-4eb4-47e3-af53-3ca409bf74cc",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.17"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
